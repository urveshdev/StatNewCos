predict1 <- predict(fit, newdata = trainSA)
predict2 <- predict(fit, newdata = testSA)
missClass(231,predict1)
missClass(231,predict2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.sedd(33833)
set.seed(33833)
vowel.test$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
fit <- train(y~., data = vowel.train, method = "rf")
getTree(fit)
getTree(fit,k=2)
getTree(fit$finalModel)
?varimp
library(caret)
?varimp
?varImp
varImp(fit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
data1 <- segmentationOriginal[segmentationOriginal$Case=="",]
data1
segmentationOriginal$Case
Train <- segmentationOriginal$Case=="Test"
data1 <- segmentationOriginal[Train,]
data1Tet <- segmentationOriginal[-Train,]
dim(data1)
dim(data1Test)
dim(data1Tet)
Train
dim(segmentationOriginal)
Train <- segmentationOriginal[segmentationOriginal$Case=="Train",]
Test <- segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(Test)
dim(Train)
set.seed(125)
fit <- train(Class ~ ., data = Train, method = "rpart")
fit$finalModel
plot(fit$finalModel)
plot(fit$finalModel, uniform = TRUE, main = "classification")
text(fit$finalModel)
text(fit$finalModel, use.n =TRUE)
text(fit$finalModel, use.n =TRUE, all=TRUE)
text(fit$finalModel, use.n =TRUE, all=TRUE, cex - 0.8)
text(fit$finalModel, use.n =TRUE, all=TRUE, cex = 0.8)
plot(fit$finalModel, uniform = TRUE, main = "classification")
text(fit$finalModel, use.n =TRUE, all=TRUE, cex = 0.8)
fancyRpartPlotfit$finalModel)
?fancyRpartPlot
install.packages(rattle)
install.packages("rattle")
library("rattle")
?fancyRpartPlot
fancyRpartPlot(fit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(fit$finalModel)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
summary(train)
names(train)
dim(train)
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "pml-training.csv", method = "curl")
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "pml-training.csv", method = curl)
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "pml-training.csv")
is.na(train)
temp <- sapply(X = train, function(x){sum(is.na(x))})
temp
sum(is.na(train[,18]))
(is.na(train[,18]))
dim(train)
dim(temo)
dim(temp)
length(temp)
misssingCount <- sapply(X = train, function(x){sum(is.na(x))})
summary(misssingcount)
summary(misssingCount)
missingCount <- sapply(X = train, function(x){sum(is.na(x))})
summary(missingCount)
dim(missingCount)
length(missingCount)
missingCount[18]
missingCount[17]
missingcount[18] > 0
missingCount[18] > 0
missingCount[17] > 0
missingCount <- sapply(missingCount, function(x) {if (x>0) then 1 else 0})
missingCount <- sapply(missingCount, x>0)
missingCount <- sapply(X = train, function(x){sum(is.na(x)) > 0})
missingCount
missingCount$stddev_pitch_forearm
missingCount$accel_forearm_x
missingCount
missingCount[18]
missingCount[17]
missingCountI <- missingCount==TRUE
missingCountI
missingCountI <- missingCount== "TRUE"
missingCountI
missingCountI <- sapply(missingCount, function(x) {if(x == "TRUE") return x})
missingCountI <- sapply(missingCount, function(x) {if(x == "TRUE"): return x})
missingCountI <- sapply(missingCount, function(x) {if(x == "TRUE"): {return x}})
missingCountI <- sapply(missingCount, function(x) { if(x == "TRUE") {return x}})
missingCount <- sapply(X = train, function(x){sum(is.na(x))})
missingCountI <- which(missingCount>10000)
missingCountI
trainN <- train[,-missingCountI]
dim(trainN)
testN <- test[,-missingCountI]
dim(trainN)
names(trainN)
fit1 <- train(classe ~ . , data = trainN, method = "rfcv")
install.packages("randomForest")
library("randomForest")
inTrainN <- createDataPartition(y = trainN$classe , p=0.75, list = FALSE)
dim(inTrain)
dim(inTrainN)
trainN1 <- trainN[inTrainN,]
trainN2 <- trainN[-inTrainN,]
fit1 <- train(classe ~ . , data = trainN1, method = "rf")
delete(temp)
remove(temp)
install.packages("doParallel")
library(doParallel)
registerDoParallel(cores=4)
fit1 <- train(classe ~ . , data = trainN1, method = "rf", preProcess = "pca")
registerDoParallel(cores=4)
registerDoParallel(cores=2)
remove(fit1)
fit1 <- train(classe ~ . , data = trainN1, method = "rf", preProcess = "pca")
require(doParallel)
require(caret)
registerDoParallel(cores=2)
fit1 <- train(classe ~ . , data = trainN1, method = "rpart", preProcess = "pca")
?dbscan
require(fpc)
?dbscan
library(devtools)
install.packages(slidify)
install.packages("slidify")
install_github("slidify","ramnathv")
?install_github
install_github(username = "slidify",auth_token = "ramnathv")
install_github(username =  "slidify", repo = "ramnathv")
install_github(username =  "slidify/ramnathv", repo = "ramnathv")
install_github(username =  "slidify", ref = "ramnathv")
install_github(repo =  "slidify", username =  = "ramnathv")
install_github(repo =  "slidify", username = "ramnathv")
install_github(repo =  "slidifyLibraries", username = "ramnathv")
library(slidify)
library("slidify")
install.packages("stringr")
library("slidify")
update.packages("stringr")
library("slidify")
library("slidify")
library("slidify")
library("slidify")
remove.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library("slidify")
update.packages("stringr")
library("slidify")
install_version("stringr", version="0.6.2")
install_version("stringr", version="0.6.2", type = "source")
install_github("ramnathv/slidify", "ramnathv")
install_github("raamnathv/slidifyLibraries")
install_github("raamnathv/slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library("slidify")
remove.packages("stringr")
library("slidify")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
setwd("C:/Users/udevani/Desktop/Rpro/DDP Project")
load("IND_adm3.RData")
load("IND_adm3.rds")
library(sp)
library(RColorBrewer)
load("IND_adm3.rds")
library(gadm)
install.packages(gadm)
install.packages("gadm")
library(gadm)
data <- readRDS("IND_adm3.rds")
data
names(data)
spplot(data, "NAME_1", scales=list(draw=T), colorkey=F, main="India")
data <- readRDS("IND_adm1.rds")
spplot(data, "NAME_1", scales=list(draw=T), colorkey=F, main="India")
unique(data$NAME_1)
?spplot
data1 <- read.csv("NRC.csv")
head(data1)
nameS(data1)
names(data1)
unique(data1$State)
?spplot
names(data1)
head(data1$No..of.Companies...Private)
unique(data$NAME_1)
head(data1$State)
(data1$State)
unique(data$NAME_1)
length(data1$State)
(data1$State)
length(data1$State)
lengt(data1)
lengt(data)
length(data1$State)
length(data$NAME_1)
data1$State[2]
data$NAME_![2]
data$NAME_1[2]
data$NAME_1[1]
data1 <- data1[order(data1$State), ]
data1$State[2]
data1$State[6]
data1$State[36]
data$NAME_1[36]
data1$State[37]
data1$State[38]
data1$State[39]
data1 <- data1[!grep("Total",data1$State), ]
data1$State[39]
data1$State[36]
data1$State[35]
data1$State
data1 <- read.csv("NRC.csv")
?grep
grep("total", data1$State, ignore.case = FALSE)
grep("total", data1$State, ignore.case = TRUE)
totalRows <- grep("total", data1$State, ignore.case = TRUE)
data1 <- data1[totalRows,]
names(data1)
data1 <- data1[order(data1$State), ]
data1$State[2]
data1 <- read.csv("NRC.csv")
totalRows <- grep("total", data1$State, ignore.case = TRUE)
data1 <- data1[-totalRows,]
data1 <- data1[order(data1$State), ]
data1$State[2]
data$NAME_1[2]
data$NAME_1[36]
data1$State[36]
data1$State[35]
data1$State[2]
data1$State[3]
data1$State[10]
data1$State[20]
data1$State[30]
data1$State[31]
data1$State[32]
data1$State[33]
data1$State[34]
data1$State[35]
data$NAME_1
data1$State
!data$NAME1= ("Sikkim" or "Telangana")
!data$NAME1= ("Sikkim" || "Telangana")
data$NAME1 = ("Sikkim" || "Telangana")
data$NAME1 = ("Sikkim")
data1 <- read.csv("NRC.csv")
totalRows <- grep("total", data1$State, ignore.case = TRUE)
data1 <- data1[-totalRows,]
data1 <- data1[order(data1$State), ]
data$NAME1 == "Sikkim"
data$NAME1 == "Sikkim"
indiaLevel1 <- readRDS("IND_adm1.rds")
indiaLEvel1$NAME1 == "Sikkim"
indiaLevel1$NAME1 == "Sikkim"
indiaLevel1$NAME_1 == "Sikkim"
indiaLevel1$NAME_1 == "Sikkim" || "Telangana"
indiaLevel1$NAME_1 == "Sikkim" or "Telangana"
indiaLevel1$NAME_1 == ("Sikkim" or "Telangana")
indiaLevel1$NAME_1 == ("Sikkim" || "Telangana")
indiaLevel1$NAME_1 in ("Sikkim" || "Telangana")
indiaLevel1$NAME_1 in c("Sikkim","Telangana")
indiaLevel1$NAME_1 == c("Sikkim","Telangana")
indiaLevel1$NAME_1 == "Sikkim" || indiaLevel1$NAME_1 == "Telangana"
indiaLevel1$NAME_1 == "Sikkim"
indiaLevel1$NAME_1 == "Sikkim" or indiaLevel1$NAME_1 == "Telangana"
indiaLevel1$NAME_1 == "Sikkim" || indiaLevel1$NAME_1 == "Telangana"
indiaLevel1$NAME_1 == "Sikkim"
indiaLevel1$NAME_1 == "Telangana"
(indiaLevel1$NAME_1 == "Sikkim") || (indiaLevel1$NAME_1 == "Telangana")
!(indiaLevel1$NAME_1 == "Sikkim") || (indiaLevel1$NAME_1 == "Telangana")
indiaLevel1$NAME_1 <- indiaLevel1[!(indiaLevel1$NAME_1 == "Sikkim"),]
grep(c("Sikkim", "Telangana"),indiaLevel1$NAME_1)
grep("Sikkim",indiaLevel1$NAME_1)
grep("Telangana",indiaLevel1$NAME_1)
c(grep("Sikkim",indiaLevel1$NAME_1),grep("Telangana",indiaLevel1$NAME_1))
indiaLevel1$NAME_1 <- indiaLevel1[-c(grep("Sikkim",indiaLevel1$NAME_1),grep("Telangana",indiaLevel1$NAME_1)),]
indiaLevel1 <- indiaLevel1[-c(grep("Sikkim",indiaLevel1$NAME_1),grep("Telangana",indiaLevel1$NAME_1)),]
?spplot
data1$State
indiaLevel1$NAME_1
data1[data1$state=="Dadar & N. Haveli",]$state = "Dadra and Nagar Haveli"
data1[data1$State=="Dadar & N. Haveli",]$state = "Dadra and Nagar Haveli"
data1[data1$State=="Dadar & N. Haveli",]$State = "Dadra and Nagar Haveli"
data1$State
data1[data1$State=="Dadar & N. Haveli",]$State = as.factor("Dadra and Nagar Haveli")
data1 <- read.csv("NRC.csv")
totalRows <- grep("total", data1$State, ignore.case = TRUE)
data1 <- data1[-totalRows,]
data1 <- data1[order(data1$State), ]
data1$State
data1[data1$State=="Dadar & N. Haveli",]$State = as.factor("Dadra and Nagar Haveli")
data1 <- read.csv("NRC.csv")
totalRows <- grep("total", data1$State, ignore.case = TRUE)
data1 <- data1[-totalRows,]
data1 <- data1[order(data1$State), ]
levels(data1$State)
levels(data1$State)[levels(data1$State)== "Dadar & N. Haveli"] <- "Dadra and Nagar Haveli"
levels(data1$State)
levels(data1$State)[levels(data1$State)== "A & N Islands"] <- "Andaman and Nicobar"
indiaLevel1$NAME_1
levels(data1$State)[levels(data1$State)== "Daman & Diu"] <- "Daman and Diu"
indiaLevel1$NAME_1
levels(data1$State)
(data1$State)
data1$State <- factor(data1$State)
levels(data1$State)
as.factor(indiaLevel1$NAME_1)
levels(data1$State)
(data1$State)
names(data1)
names(data1)
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"NAME_1",  col.regions=data1$No..of.Companies...Public, colorkey=T, main="Indian States")
warnings()
?spplot
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"NAME_1",  col=data1$No..of.Companies...Public, colorkey=T, main="Indian States")
length(indiaLevel1)
dim(indiaLevel1)
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"NAME_1",  col.region=rgb(0, data1$No..of.Companies...Public/3184,0), colorkey=T, main="Indian States")
?rgb
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"NAME_1",  col.region=rgb(0, data1$No..of.Companies...Public,0), colorkey=T, main="Indian States")
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"NAME_1",  col.region=data1$No..of.Companies...Public, colorkey=T, main="Indian States")
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"NAME_1",  col=data1$No..of.Companies...Public, col.region =col, colorkey=T, main="Indian States")
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"data1$No..of.Companies...Public",  col=data1$No..of.Companies...Public, col.region =col, colorkey=T, main="Indian States")
indiaLevel1$publicCo = data1$No..of.Companies...Public
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"PublicCo",  col=publicCo, col.region =col, colorkey=T, main="Indian States")
indiaLevel1$publicCo = data1$No..of.Companies...Public
indiaLevel1$publicCo
dim(indiaLevel1)
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"publicCo",  col=publicCo, col.region =col, colorkey=T, main="Indian States")
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"publicCo",  col.region=publicCo, colorkey=T, main="Indian States")
indiaLevel1$publicCo
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"publicCo",  col.region=publicCo, colorkey=T, main="Indian States")
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"publicCo",  col.region=indiaLevel1$publicCo, colorkey=T, main="Indian States")
names(data1)
indiaLevel1$AuthCapPub <- data1$Authorized.Capital...Public
indiaLevel1$NAME_1 = as.factor(ind1$NAME_1)
spplot(indiaLevel1,"AuthCapPub",  col.region=indiaLevel1$AuthCapPub, colorkey=T, main="Indian States")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(data1)
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?spplot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderText
shiny::runApp()
indiaLevel1$State[which.max(indiaLevel1$publicCo),]
indiaLevel1$State[which.max(indiaLevel1$Authorized.Capital...Total),]
[which.max(indiaLevel1$Authorized.Capital...Total)
[which.max(indiaLevel1$Authorized.Capital...Total)]
which.max(indiaLevel1$Authorized.Capital...Total)
?which.max
indiaLevel1$Authorized.Capital...Total
indiaLevel1 <- readRDS("IND_adm1.rds")
NRCdata <- read.csv("NRC.csv")
totalRows <- grep("total", NRCdata$State, ignore.case = TRUE)
NRCdata <- NRCdata[-totalRows,]
NRCdata <- NRCdata[order(NRCdata$State), ]
indiaLevel1 <- indiaLevel1[-c(grep("Sikkim",indiaLevel1$NAME_1),
grep("Telangana",indiaLevel1$NAME_1)),]
levels(NRCdata$State)[levels(NRCdata$State)== "Dadar & N. Haveli"] <- "Dadra and Nagar Haveli"
levels(NRCdata$State)[levels(NRCdata$State)== "A & N Islands"] <- "Andaman and Nicobar"
levels(NRCdata$State)[levels(NRCdata$State)== "Daman & Diu"] <- "Daman and Diu"
NRCdata$State <- factor(NRCdata$State)
indiaLevel1$publicCo <- NRCdata$No..of.Companies...Public
indiaLevel1$authCapPub <- NRCdata$Authorized.Capital...Public
indiaLevel1$privateCo <- NRCdata$No..of.Companies...Private
indiaLevel1$authCapPr <- NRCdata$Authorized.Capital...Private
indiaLevel1$totalCo <- NRCdata$No..of.Companies...Total
indiaLevel1$authCapTot <- NRCdata$Authorized.Capital...Total
indiaLevel1$NAME_1 = as.factor(indiaLevel1$NAME_1)
indiaLevel1$Authorized.Capital...Total
names(indiaLevel1)
NCRdata$State[which.max(indiaLevel1$test),]
NRCdata$State[which.max(indiaLevel1$test),]
which.max(indiaLevel1$test)
indiaLevel1$test
NRCdata$State[which.max(NRCdata$Authorized.Capital...Total),]
which.max(NRCdata$Authorized.Capital...Total)
NRCdata[which.max(NRCdata$Authorized.Capital...Total),2]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?p
?link
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
library(slidify)
author("statNewCos")
shiny::runApp('C:/Users/udevani/Desktop/Rpro/DDP Project')
NRCdata$State
## List of states for which info is available
slidify("index.rmd")
slidify("index.Rmd")
browseURL(index.html)
browseURL("index.html")
========================================================
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.md")
browseURL("index.Rmd")
browseURL("index.html")
library(knitR)
library("knitR")
library(knitr)
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
- The base data for such maps, the "polygons" that define the country, the states, the districts and even the talukas ( or sub-divisions) is available from an organisation called Global Administrative Areas or gadm.org
Github Repo:
Slidify Presentation:
Slidify Presentation:
Slidify Presentation:khk
